import { SuggestionSource } from '../entities/suggestion.entity';
import { ContactInfo } from '../dto/syncing.dto';
import { User } from '../../users/entities/user.entity';

/**
 * üéØ Core interfaces cho suggestion system
 * Fresher s·∫Ω d·ªÖ hi·ªÉu h∆°n khi c√≥ clear contracts
 */

/**
 * Suggestion data c∆° b·∫£n tr∆∞·ªõc khi save v√†o DB
 * 
 * @interface SuggestionCandidate
 * @description ƒê·∫°i di·ªán cho m·ªôt suggestion candidate tr∆∞·ªõc khi ƒë∆∞·ª£c persist v√†o database.
 * Ch·ª©a t·∫•t c·∫£ th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o m·ªôt friend suggestion.
 * 
 * @example
 * ```typescript
 * const candidate: SuggestionCandidate = {
 *   userEmail: "user@example.com",
 *   suggestedUserEmail: "friend@example.com", 
 *   source: SuggestionSource.CONTACT,
 *   reason: "Found in your contacts ‚Ä¢ 2 mutual friends",
 *   mutualFriendsCount: 2,
 *   metadata: {
 *     contactName: "John Doe",
 *     mutualFriends: ["Alice", "Bob"]
 *   },
 *   priority: 7
 * };
 * ```
 */
export interface SuggestionCandidate {
  /** Email c·ªßa user nh·∫≠n suggestion */
  userEmail: string;
  
  /** Email c·ªßa user ƒë∆∞·ª£c suggest */
  suggestedUserEmail: string;
  
  /** Source c·ªßa suggestion (contact, facebook, mutual_friends, etc.) */
  source: SuggestionSource;
  
  /** L√Ω do suggest (hi·ªÉn th·ªã cho user) */
  reason: string;
  
  /** S·ªë l∆∞·ª£ng mutual friends */
  mutualFriendsCount: number;
  
  /** Metadata b·ªï sung (t√™n trong contact, mutual friends list, etc.) */
  metadata?: Record<string, any>;
  
  /** Priority score 1-10, cao h∆°n = quan tr·ªçng h∆°n */
  priority?: number;
}

/**
 * K·∫øt qu·∫£ t√≠nh to√°n mutual friends
 */
export interface MutualFriendsResult {
  count: number;
  friendNames: string[];
  userIds: string[];
}

/**
 * Context khi t·∫°o suggestions
 */
export interface SuggestionContext {
  userEmail: string;
  excludeExisting?: boolean; // Skip existing relationships
  maxSuggestions?: number;
  minMutualFriends?: number;
}

/**
 * K·∫øt qu·∫£ c·ªßa strategy
 */
export interface SuggestionStrategyResult {
  candidates: SuggestionCandidate[];
  processed: number;
  skipped: number;
  errors: string[];
}

/**
 * üîë Main interface m√† m·ªçi strategy ph·∫£i implement
 * 
 * @interface ISuggestionStrategy
 * @description Strategy Pattern - m·ªói source c√≥ c√°ch t·∫°o suggestion kh√°c nhau.
 * Fresher c√≥ th·ªÉ extend interface n√†y ƒë·ªÉ implement suggestion logic cho new sources.
 * 
 * @example
 * ```typescript
 * @Injectable()
 * export class FacebookSuggestionStrategy implements ISuggestionStrategy {
 *   readonly source = SuggestionSource.FACEBOOK;
 * 
 *   async generateCandidates(context: SuggestionContext, data: FacebookSyncData): Promise<SuggestionStrategyResult> {
 *     // Implementation logic here
 *     return { candidates: [], processed: 0, skipped: 0, errors: [] };
 *   }
 * 
 *   validateCandidate(candidate: SuggestionCandidate): boolean {
 *     return true; // Custom validation logic
 *   }
 * 
 *   calculatePriority(candidate: SuggestionCandidate): number {
 *     return 5; // Custom priority calculation
 *   }
 * }
 * ```
 */
export interface ISuggestionStrategy {
  /**
   * Lo·∫°i source m√† strategy n√†y handle
   * @readonly
   */
  readonly source: SuggestionSource;

  /**
   * T·∫°o suggestion candidates t·ª´ data source
   * 
   * @param context - User context v√† options (userEmail, limits, filters)
   * @param data - Data specific cho strategy (contacts, tokens, etc.)
   * @returns Promise v·ªõi list candidates v√† statistics
   * 
   * @throws {InvalidCandidateException} N·∫øu context ho·∫∑c data invalid
   * @throws {SuggestionDataException} N·∫øu data processing fails
   */
  generateCandidates(
    context: SuggestionContext,
    data: any
  ): Promise<SuggestionStrategyResult>;

  /**
   * Validate candidate c√≥ h·ª£p l·ªá kh√¥ng
   * 
   * @param candidate - Candidate c·∫ßn validate
   * @returns true n·∫øu candidate valid, false otherwise
   * 
   * @example
   * ```typescript
   * const isValid = strategy.validateCandidate({
   *   userEmail: "user@example.com",
   *   suggestedUserEmail: "friend@example.com",
   *   source: SuggestionSource.CONTACT,
   *   reason: "Found in contacts",
   *   mutualFriendsCount: 0
   * }); // Returns true if valid
   * ```
   */
  validateCandidate(candidate: SuggestionCandidate): boolean;

  /**
   * Calculate priority cho candidate (1-10)
   * 
   * @param candidate - Candidate c·∫ßn t√≠nh priority
   * @returns Priority score t·ª´ 1-10, higher = more important
   * 
   * @example
   * ```typescript
   * const priority = strategy.calculatePriority(candidate);
   * // Returns 7 for high-priority suggestion
   * // Returns 3 for low-priority suggestion
   * ```
   */
  calculatePriority(candidate: SuggestionCandidate): number;
}

/**
 * üìä Service t√≠nh to√°n mutual friends
 * T√°ch ri√™ng ƒë·ªÉ d·ªÖ test v√† reuse
 */
export interface IMutualFriendsCalculator {
  /**
   * T√≠nh s·ªë mutual friends gi·ªØa 2 users
   */
  calculateMutualFriends(
    userEmail: string,
    suggestedUserEmail: string
  ): Promise<MutualFriendsResult>;

  /**
   * Batch calculate cho nhi·ªÅu users c√πng l√∫c
   * Performance optimization
   */
  batchCalculateMutualFriends(
    userEmail: string,
    suggestedUserEmails: string[]
  ): Promise<Map<string, MutualFriendsResult>>;
}

/**
 * üèÜ Service ranking suggestions
 */
export interface ISuggestionRanking {
  /**
   * Rank list candidates theo multiple criteria
   */
  rankCandidates(candidates: SuggestionCandidate[]): SuggestionCandidate[];

  /**
   * Calculate overall score cho 1 candidate
   */
  calculateScore(candidate: SuggestionCandidate): number;
}

/**
 * ‚úÖ Service validation
 */
export interface ISuggestionValidator {
  /**
   * Validate candidate c√≥ valid kh√¥ng
   */
  validateCandidate(candidate: SuggestionCandidate): Promise<ValidationResult>;

  /**
   * Check duplicate suggestions
   */
  checkDuplicate(
    userEmail: string,
    suggestedUserEmail: string
  ): Promise<boolean>;

  /**
   * Check existing relationship
   */
  checkExistingRelationship(
    userEmail: string,
    suggestedUserEmail: string
  ): Promise<boolean>;
}

/**
 * K·∫øt qu·∫£ validation
 */
export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

/**
 * üéØ Main orchestrator interface
 * Coordinate c√°c strategies v√† services
 */
export interface ISuggestionOrchestrator {
  /**
   * Generate suggestions t·ª´ multiple sources
   */
  generateSuggestions(
    context: SuggestionContext,
    sources: SuggestionSource[]
  ): Promise<SuggestionCandidate[]>;

  /**
   * Process v√† save suggestions v√†o DB
   */
  processSuggestions(
    candidates: SuggestionCandidate[]
  ): Promise<{ created: number; skipped: number; errors: string[] }>;
}